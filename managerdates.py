# -*- coding: utf-8 -*-
"""ManagerDates.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HK_uhHEklfEYcI8kj66jZClsl_2JSxdh
"""

import pandas as pd
import unicodedata
import numpy as np



# Lista dos arquivos
arquivos = [
    "Original/Produtor/produtoras-independentes.csv",
    "Original/Produtor/produtores-de-obras-nao-publicitarias-brasileiras.csv",
    "Original/Produtor/produtores-de-obras-nao-publicitarias-estrangeiras.csv"
]

print(f"Arquivo: {arquivos[0]}", "\n")
df0 = pd.read_csv(arquivos[0], sep=";")
print(f"Linhas: {df0.shape[0]}, Colunas: {df0.shape[1]}\n")
df0.head(30)

print(f"Arquivo: {arquivos[1]}", "\n")
df1 = pd.read_csv(arquivos[1], sep=";")
print(f"Linhas: {df1.shape[0]}, Colunas: {df1.shape[1]}\n")
df1.head(30)

print(f"Arquivo: {arquivos[2]}", "\n")
df2 = pd.read_csv(arquivos[2], sep=";")
print(f"Linhas: {df2.shape[0]}, Colunas: {df2.shape[1]}\n")
df2.head(30)

df0 = df0.rename(columns={"RAZAO_SOCIAL": "Nome_Produtor", "UF": "UF_Produtor", "CLASSIFICACAO_NIVEL_PRODUTORA": "Classificação_Nível_Produtor"})
df0.head()

df1 = df1.rename(columns={"PRODUTOR": "Nome_Produtor", "CNPJ_PRODUTOR": "CNPJ"})
df1.head()

df2 = df2.rename(columns={"PRODUTOR": "Nome_Produtor"})
df2.head()

df0.head()

df1.head()

df2.head()

# Concatenar verticalmente (empilhar as tabelas)
df_combined = pd.concat([df0, df1, df2], axis=0, ignore_index=True)

print(f"Linhas: {df_combined.shape[0]}, Colunas: {df_combined.shape[1]}\n")
df_combined.head()

# Transformar todos os dados de texto para minúsculas (apenas strings serão modificadas)
df_combined0 = df_combined.applymap(lambda x: x.lower() if isinstance(x, str) else x)

print(f"Linhas: {df_combined0.shape[0]}, Colunas: {df_combined0.shape[1]}\n")
df_combined0.head()

# Função para remover acentos
def remover_acentos(texto):
    if isinstance(texto, str):
        return unicodedata.normalize('NFKD', texto).encode('ascii', 'ignore').decode('utf-8')
    return texto

# Aplicar a função em todo o DataFrame
df_combined1 = df_combined0.applymap(remover_acentos)

# Remover espaços de todas as células
df_combined2 = df_combined1.applymap(lambda x: str(x).strip())

# Colocando NaN (null) em todos os lugares que colocou nan
df_combined2['Classificação_Nível_Produtor'] = df_combined2['Classificação_Nível_Produtor'].replace('nan', np.nan)

# Preenchendo os NaN com Zero
df_combined2['Classificação_Nível_Produtor'] = df_combined2['Classificação_Nível_Produtor'].fillna(0)

# Convertendo para inteiro as colunas que tinham inteiros
df_combined2["Classificação_Nível_Produtor"] = pd.to_numeric(df_combined2["Classificação_Nível_Produtor"], downcast='integer')

# Substituir todos os hífens por espaços em todo o DataFrame
df_combined3 = df_combined2.replace('-', ' ', regex=True)

# Substituir múltiplos espaços por um único espaço em todo o DataFrame
df_combined4 = df_combined3.replace(r' +', ' ', regex=True)

# Substituir todos os espaços por hífen em todo o DataFrame
df_combined5 = df_combined4.replace(' ', '-', regex=True)

df_combined5 = df_combined5.replace('nan', np.nan)

df_combined6 = df_combined5

# Criando uma coluna 'Id_Produtor'
df_combined6['Id_Produtor'] = pd.factorize(df_combined6['Nome_Produtor'])[0]

estados_brasil = [
    'ac', 'al', 'ap', 'am', 'ba', 'ce', 'df', 'es', 'go', 'ma', 'mt', 'ms',
    'mg', 'pa', 'pb', 'pr', 'pe', 'pi', 'rj', 'rn', 'rs', 'ro', 'rr', 'sc',
    'sp', 'se', 'to'
]

# Função para determinar se o valor é brasileiro
def definir_brasileiro(row):
    if pd.notna(row['ROE']):
        return 0
    elif row['UF_Produtor'] in estados_brasil:
        return 1
    elif row['PAIS_PRODUTOR'] == 'brasil':
        return 1
    else:
        return 0

df_combined7 = df_combined6

# Aplicando a função para criar a coluna 'Brasileiro'
df_combined7['Brasileiro'] = df_combined6.apply(definir_brasileiro, axis=1)
df_combined7["CPB_ROE"] = df_combined7["CPB"].fillna(df_combined7["ROE"])

df_combined7 = df_combined7[['Id_Produtor','Nome_Produtor', 'CNPJ', 'MUNICIPIO', 'UF_Produtor', 'Classificação_Nível_Produtor', 'Brasileiro', 'CPB_ROE']]

df_combined7.to_csv('Novo/Produtor/Produtor.csv', sep=',', index=False)